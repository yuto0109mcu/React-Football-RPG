{"version":3,"sources":["img/heroine-img/hmm.PNG","img/heroine-img/waoh.PNG","img/heroine-img/sad.PNG","img/heroine-img/yeah.PNG","img/enemy-img/teki.png","img/battle-bg.jpg","components/Decision.js","components/LoveGauge.js","components/Heroine.js","texts-source/enemyNameText.js","components/EnemyName.js","components/Enemy.js","texts-source/texts.js","components/resetCSS.js","components/Main.js","components/Opening.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Decision","showChoices","GuageContainer","styled","div","props","love","LoveGuage","style","id","HeroineStyle","Heroine","imgUrl","src","alt","className","enemyList","EnemyNameBox","p","EnemyName","phaseIndex","enemyName","EnemyStyle","afterTextIndex","phrase","goNextText","attack","Enemy","decisionJudge","enemyImgSrc","enemyImg","badEndingText","normalEndingText","goodEndingText","goodText","badText","mainPhrases","decisions","text","good","ResetCSS","createGlobalStyle","Screen","bgImg","Main","ShowBattle","useState","textIndex","setTextIndex","setPhaseIndex","decisionIndex","setDecisionIndex","setAfterTextIndex","endingIndex","setEndingIndex","setPhrase","decisionTime","setDecisionTime","setDecidionJudge","battleTime","setBattleTime","setAttack","setLove","waohImg","setImgUrl","length","onClick","yeahImg","hmmImg","sadImg","afterBattle","resetStates","Choice","map","x","i","key","Opening","startGame","App","start","setStart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5a93202f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hmm.575c86dd.PNG\";","module.exports = __webpack_public_path__ + \"static/media/waoh.895d07a6.PNG\";","module.exports = __webpack_public_path__ + \"static/media/sad.9ff51fc7.PNG\";","module.exports = __webpack_public_path__ + \"static/media/yeah.a839a231.PNG\";","module.exports = __webpack_public_path__ + \"static/media/teki.d9884610.png\";","module.exports = __webpack_public_path__ + \"static/media/battle-bg.872a4d29.jpg\";","import React from 'react'\r\n\r\nconst Decision = ({showChoices}) => {\r\n\r\n   return (\r\n      <>\r\n         {showChoices}  \r\n      </>\r\n   )\r\n}\r\n\r\nexport default Decision","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst LoveGuage = ({love}) => {\r\n\r\n   // const heightStyle = {height: {love}%}\r\n\r\n   return (\r\n      <GuageContainer love={love} style >\r\n         <p>♥</p>\r\n         <div id=\"love-guage\" ></div>\r\n      </GuageContainer>\r\n   )\r\n}\r\n\r\n   const GuageContainer = styled.div`\r\n      width: 20px;\r\n      height: 200px;\r\n      border: 3px solid rgb(255, 100, 183);\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: flex-end;\r\n      align-items: center;\r\n      position: absolute;\r\n      right: 25px;\r\n      top: 80px;\r\n      \r\n      p {\r\n         position: absolute;\r\n         color: #fff;\r\n         top: -90px; \r\n         font-size: 6em;\r\n         color: rgb(255, 14, 183);\r\n      }\r\n      #love-guage {\r\n         width: 100%;\r\n         background-color: rgb(255, 14, 183);\r\n         height: ${props => props.love}%;\r\n         bottom: 0;\r\n      }\r\n   `\r\n\r\nexport default LoveGuage","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst Heroine = ({imgUrl}) => {\r\n   return (\r\n      \r\n         <HeroineStyle>\r\n            <img src={imgUrl} alt=\"ヒロインの写真\" className=\"heroine-img\" />\r\n         </HeroineStyle>\r\n      \r\n   )\r\n}\r\n\r\nconst HeroineStyle = styled.div`\r\n   /* height: 40%; */\r\n   width: 100%;\r\n   position: absolute;\r\n   bottom: 220px;\r\n   .heroine-img {\r\n      /* height: 100%; */\r\n      width: 100%;\r\n   }\r\n`\r\n\r\nexport default Heroine","const enemyList = [\r\n   \"2トップハイプレス\",\r\n   \"5-3-2\"\r\n]\r\n\r\nexport default enemyList","import React from 'react'\r\nimport styled from \"styled-components\"\r\nimport enemyList from \"../texts-source/enemyNameText\"\r\n\r\nconst EnemyName = ({phaseIndex}) => {\r\n   const enemyName = enemyList[phaseIndex]\r\n   return (\r\n      // <>\r\n      //    <p></p>\r\n      // </>\r\n      <EnemyNameBox>\r\n         {enemyName}\r\n      </EnemyNameBox>\r\n   )\r\n}\r\n\r\nconst EnemyNameBox = styled.p`\r\n   display: block;\r\n   color: #fff;\r\n   font-size: 1.2em;\r\n   text-align: center;\r\n   background-color: rgba(0, 0, 0, 0.8);\r\n   background-color: rgba(13, 80, 224, 0.774);\r\n   height: 30px;\r\n   width: 100%;\r\n   border-radius: 5px;\r\n`\r\n\r\nexport default EnemyName","import React from 'react'\r\nimport EnemyName from \"./EnemyName\"\r\nimport enemyImg from \"../img/enemy-img/teki.png\"\r\nimport styled from \"styled-components\"\r\n\r\nconst Enemy = ({phrase, goNextText, phaseIndex, decisionJudge, attack , afterTextIndex}) => {\r\n   const enemyImgSrc = enemyImg\r\n\r\n   return (\r\n      <EnemyStyle\r\n         phrase={phrase}\r\n         goNextText={goNextText}\r\n         decisionJudge={decisionJudge}\r\n         attack={attack}\r\n         afterTextIndex={afterTextIndex}\r\n      >\r\n         <EnemyName phaseIndex={phaseIndex} />\r\n         <img src={enemyImgSrc} alt=\"enemy\"/>\r\n      </EnemyStyle>\r\n   )\r\n}\r\n\r\nconst EnemyStyle = styled.div`\r\n   /* height: 30%; */\r\n   width: 50%;\r\n   display: block;\r\n   display: ${props => props.afterTextIndex > 0 || props.phrase === props.goNextText ? \"none\" : \"block\"};\r\n   transition: 1s;\r\n   animation: ${props => \r\n      props.attack ? \"gururi 1.5s linear 1\" : \"none\"\r\n   };\r\n   animation-fill-mode: forwards;\r\n   position: absolute;\r\n   left: 20px;\r\n   top: 120px;\r\n   @keyframes gururi { \r\n      0% {\r\n         transform: rotateZ(0deg) scale(1);\r\n      }\r\n      100% {\r\n         transform: rotateZ(2000deg) scale(0);\r\n         opacity: 0;\r\n      }\r\n   }\r\n   @keyframes scale {\r\n      0% {\r\n         transform: scale(1);\r\n      }\r\n      100% {\r\n         transform: scale(0);\r\n      }\r\n   }\r\n\r\n   img {\r\n      /* height: 100%; */\r\n      width: 100%;\r\n   }\r\n`\r\n\r\nexport default Enemy","// ---------------------------------------------------\r\n// --------------エンディングのテキスト---------------\r\n// ---------------------------------------------------\r\nconst badEndingText = [\r\n   \"ここまで来れたけど、あなたのサッカーIQはたいしたことないのね。\",\r\n   \"正直がっかりしたわ。\",\r\n   \"ここでお別れよ。さようなら。\"\r\n]\r\n\r\nconst normalEndingText = [\r\n   \"あなたのサッカーIQはなかなかのものだったわ。\",\r\n   \"改善の余地はあるけれど、いい判断をしてたと思うわ。\",\r\n   \"私の彼氏のサポートをするために一緒にパリに行きましょう！\"\r\n]\r\n\r\nconst goodEndingText = [\r\n   \"あなたのサッカーIQはとても素晴らしかったわ！\",\r\n   \"要所要所でベストな判断をしていたと思うわ！\",\r\n   \"今の彼氏とは別れるから、私と付き合いましょう！代理人にもなってあげるわ！\",\r\n]\r\n\r\n\r\n\r\n// ---------------------------------------------------\r\n// ----------------選択の後のテキスト-----------------\r\n// ---------------------------------------------------\r\nconst goodText = [\r\n   \"すごい！倒したわ！\",\r\n   \"とても良い判断だったわね。\"\r\n]\r\nconst badText = [\r\n   \"なんとか倒せたわね...\",\r\n   \"だけど今のはあまり良い判断ではなかったかもしれないわね。\"\r\n]\r\nconst goNextText = \"さあ、次に進みましょう\"\r\n\r\n\r\n\r\n// ---------------------------------------------------\r\n// ----------------選択の時のテキスト-----------------\r\n// ---------------------------------------------------\r\nconst HowToDoText = \"どう対処する？\"\r\n\r\n\r\n\r\n\r\n// ---------------------------------------------------\r\n// ------------敵に遭遇したときのテキスト-------------\r\n// ---------------------------------------------------\r\nconst phase1Text = [\r\n   \"2トップハイプレスが現れたわ！\",\r\n   \"あいつはビルドアップの時に、CB二人に対してFW二人でプレスをかけてくるから危険よ。\",\r\n   \"プレスを上手く突破しないと倒せないわ！\"\r\n]\r\nconst phase1Decision = [\r\n   {\r\n      text: \"ドリブルでかわして縦パスを通そう\",\r\n      good: false\r\n   },\r\n   {\r\n      text: \"MFをDFラインに降ろして3バックを作ろう\",\r\n      good: true\r\n   }\r\n] \r\n\r\n\r\nconst phase2Text = [\r\n   \"5-3-2があらわれたわ！\",\r\n   \"あいつは最終ラインに5人いるから守備が堅いわよ。\",\r\n   \"上手く崩さないと倒せないわ！\"\r\n]\r\nconst phase2Decision = [\r\n   {\r\n      text: \"横パスで中盤3人のスライドを遅らせよう\",\r\n      good: true\r\n   },\r\n   {\r\n      text: \"縦パスを狙って、縦に速い攻撃をしよう\",\r\n      good: false\r\n   }\r\n]\r\n\r\n\r\n\r\n// ---------------------------------------------------\r\n// -----------------テキストの集まり------------------\r\n// ---------------------------------------------------\r\nconst mainPhrases = [\r\n   phase1Text,\r\n   phase2Text,\r\n   // LastPhaseText\r\n]\r\n\r\nconst decisions = [\r\n   phase1Decision,\r\n   phase2Decision\r\n]\r\n\r\nexport {decisions, mainPhrases, goodText, badText, goNextText, HowToDoText, badEndingText, goodEndingText, normalEndingText}","import React from 'react'\r\nimport styled,{createGlobalStyle} from \"styled-components\"\r\n\r\nconst ResetCSS = createGlobalStyle`\r\n   /* A Modern CSS Reset */\r\n*,*::before,*::after{box-sizing:border-box}ul[class],ol[class]{padding:0}body,h1,h2,h3,h4,p,ul[class],ol[class],figure,blockquote,dl,dd{margin:0}body{min-height:100vh;scroll-behavior:smooth;text-rendering:optimizeSpeed;line-height:1.5}ul[class],ol[class]{list-style:none}a:not([class]){text-decoration-skip-ink:auto}img{max-width:100%;display:block}article>*+*{margin-top:1em}input,button,textarea,select{font:inherit}img:not([alt]){filter:blur(10px)}@media(prefers-reduced-motion:reduce){*{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important;scroll-behavior:auto !important}}\r\nbox-sizing: border-box;\r\n`\r\n\r\nexport default ResetCSS","import React, { useState } from 'react';\nimport Decision from \"./Decision\"\nimport LoveGuage from \"./LoveGauge\"\nimport Heroine from \"./Heroine\"\nimport Enemy from \"./Enemy\"\nimport {\n   mainPhrases, \n   decisions, \n   goodText, \n   badText, \n   goNextText, \n   goodEndingText, \n   badEndingText, \n   normalEndingText\n} from \"../texts-source/texts\"\nimport ResetCSS from \"./resetCSS\"\nimport styled from \"styled-components\"\n\nimport waohImg from \"../img/heroine-img/waoh.PNG\"\nimport sadImg from \"../img/heroine-img/sad.PNG\"\nimport yeahImg from \"../img/heroine-img/yeah.PNG\"\nimport hmmImg from \"../img/heroine-img/hmm.PNG\"\n\nimport bgImg from \"../img/battle-bg.jpg\"\n\nconst Main = () => {\n   \n   const [textIndex, setTextIndex] = useState(0)\n   const [phaseIndex, setPhaseIndex] = useState(0)\n   const [decisionIndex, setDecisionIndex] = useState(0)\n   const [afterTextIndex, setAfterTextIndex] = useState(0)\n   const [endingIndex, setEndingIndex] = useState(0)\n\n   const [phrase, setPhrase] = useState(mainPhrases[phaseIndex][textIndex])\n\n   const [decisionTime, setDecisionTime] = useState(false)\n   const [decisionJudge, setDecidionJudge] = useState(true)\n   const [battleTime, setBattleTime] = useState(true)\n   const [attack, setAttack] = useState(false)\n\n   const [love, setLove] = useState(50)\n\n   const [imgUrl, setImgUrl] = useState(waohImg)\n\n   let ShowBattle\n   if (afterTextIndex === 2 && phaseIndex === mainPhrases.length - 1) {\n      ShowBattle = () => {\n         const ending = () => {\n            setEndingIndex(endingIndex + 1)\n            if (love > 50) {\n               setPhrase(goodEndingText[endingIndex])\n               setImgUrl(yeahImg)\n            } else if (love === 50) {\n               setPhrase(normalEndingText[endingIndex])\n               setImgUrl(hmmImg)\n            } else if (love < 50) {\n               setPhrase(badEndingText[endingIndex])\n               setImgUrl(sadImg)\n            }\n         }\n         return (\n            <>\n               <Heroine imgUrl={imgUrl} />\n               <p \n                  onClick={ending} \n                  className=\"text-box\"\n               >\n                  {phrase}\n               </p>\n            </>\n         )\n      }\n   } else if (battleTime === true) {\n      ShowBattle = () => {\n         const processBattle = () => {\n            if (textIndex === mainPhrases[phaseIndex].length) {\n               setPhrase(\"どう対処する？\")\n               setDecisionTime(true)\n               setTextIndex(0)\n               setImgUrl(hmmImg)\n            } else {\n               setTextIndex(textIndex + 1)\n               setPhrase(mainPhrases[phaseIndex][textIndex])\n               setImgUrl(waohImg)\n            }\n         }\n         return(\n            <>\n               <Enemy \n                  phrase={phrase} \n                  goNextText={goNextText}\n                  phaseIndex={phaseIndex}\n                  decisionJudge={decisionJudge}\n                  attack={attack}\n                  afterTextIndex={afterTextIndex}\n               />\n               <Heroine imgUrl={imgUrl} />\n               <p \n                  onClick={processBattle} \n                  className=\"text-box\"\n               >\n                  {phrase}\n               </p>\n            </>\n         )\n      }\n   } else if (battleTime === false) {\n      let afterBattle\n      const resetStates = () => {\n         setPhaseIndex(phaseIndex + 1)\n         setBattleTime(true)\n         setTextIndex(0)\n         setAfterTextIndex(0)\n         setAttack(false)\n      }\n      if (decisionJudge === true) {\n         ShowBattle = () => {\n            afterBattle = () => {\n               if (afterTextIndex === goodText.length) {\n                  setPhrase(goNextText)\n                  resetStates()\n                  setImgUrl(hmmImg)\n               } else {\n                  setAfterTextIndex(afterTextIndex + 1)\n                  setPhrase(goodText[afterTextIndex])\n                  setImgUrl(yeahImg)\n               }\n            }\n            return(\n               <>\n                  <Enemy \n                     phrase={phrase} \n                     goNextText={goNextText}\n                     phaseIndex={phaseIndex}\n                     decisionJudge={decisionJudge}\n                     attack={attack}\n                     afterTextIndex={afterTextIndex}\n                  />\n                  <Heroine imgUrl={imgUrl} />\n                  <p \n                     onClick={afterBattle}\n                     className=\"text-box\" \n                  >\n                     {phrase}\n                  </p>\n               </>\n            )\n         }\n      } else if (decisionJudge === false) {\n         ShowBattle = () => {\n            afterBattle = () => {\n               if (afterTextIndex === badText.length) {\n                  setPhrase(goNextText)\n                  resetStates()\n                  setImgUrl(hmmImg)\n               } else {\n                  setAfterTextIndex(afterTextIndex + 1)\n                  setPhrase(badText[afterTextIndex])\n                  setImgUrl(sadImg)\n               }\n            }\n            return(\n               <>\n                  {/* <Enemy /> */}\n                  <Enemy \n                     phrase={phrase} \n                     goNextText={goNextText}\n                     phaseIndex={phaseIndex}\n                     decisionJudge={decisionJudge}\n                     attack={attack}\n                     afterTextIndex={afterTextIndex}\n                  />\n                  <Heroine imgUrl={imgUrl} />\n                  <p \n                     onClick={afterBattle} \n                     className=\"text-box\"\n                  >\n                     {phrase}\n                  </p>\n               </>\n            )\n         }\n      }\n   } else if (phrase === goNextText) {\n      ShowBattle = () => {\n         const nextPhase = () => {\n            setPhrase(mainPhrases[phaseIndex][textIndex])\n            setAttack(false)\n            // setBattleTime(true)\n         }\n         return (\n            <>\n               <Heroine imgUrl={imgUrl} />\n               <p \n                  onClick={nextPhase} \n                  className=\"text-box\"\n               >\n                  {phrase}\n               </p>\n            </>\n         )\n      }\n   }\n\n\n\n   let showChoices\n   if (decisionTime === true) {\n      const Choice = decisions[decisionIndex].map( (x, i) => {\n         const decisionMaking = () => {\n            setDecisionIndex(decisionIndex + 1)\n            setDecisionTime(false)\n            setBattleTime(false)\n            setAttack(true)\n            if(x.good === true) {\n               setPhrase(x.text)\n               setLove(love + 5)\n               setDecidionJudge(true)\n            } else if (x.good === false) {\n               setPhrase(x.text)\n               setLove(love - 5)\n               setDecidionJudge(false)\n            }\n         }\n         return (\n            <button \n               onClick={decisionMaking}\n               key={i}\n               className=\"decision-btn\"\n            >\n               {x.text}\n            </button>\n         )\n      })\n      showChoices = (\n         <div className=\"decision-bg\">\n            <div className=\"btn-box\">\n               {Choice}\n            </div>\n         </div>\n      )\n   }\n   \n\n   return (\n      <Screen bgImg={bgImg}>\n         <ResetCSS />\n         <Decision \n            showChoices={showChoices}\n         />\n         <ShowBattle />\n         <LoveGuage love={love} />\n      </Screen>\n   );\n}\n\n\nconst Screen = styled.div`\n   height: 100vh;\n   max-height: 900px;\n   width: 100%;\n   max-width: 600px;\n   margin: 0 auto;\n   background-image: url(${({bgImg}) => bgImg});\n   background-size: cover;\n   position: relative;\n\n   .text-box {\n      background-color: blue;\n      position: absolute;\n      bottom: 20px; \n      width: 94%;\n      height: 24%;\n      padding: 20px 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      background-color: rgba(255, 255, 255, 0.705);\n      border-radius: 10px;\n      font-size: 1.3em;\n      border: 4px solid #fff;\n   }\n   .decision-bg {\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      position: absolute;\n      z-index: 10;\n      width: 100%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      .btn-box {\n         display: flex;\n         flex-direction: column;\n         justify-content: space-between;\n         height: 30%;\n         width: 80%;\n         .decision-btn {\n            width: 100%;\n            height: 40%;\n            border: none;\n            padding: 0 5px;\n            margin: 0 auto;\n            background-color: rgba(0, 221, 210, 0.7); \n            border: 3px solid rgb(13, 182, 224);\n            border-radius: 6px;\n         }\n      }\n   }\n`\n\nexport default Main;","import React from 'react'\r\n\r\nconst Opening = ({startGame}) => {\r\n   return (\r\n      <div>\r\n         <button onClick={startGame} >\r\n            GO\r\n         </button>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Opening","import React, { useState } from 'react'\r\nimport Main from \"./components/Main\"\r\nimport Opening from \"./components/Opening\"\r\n\r\nconst App = () => {\r\n\r\n   const [start, setStart] = useState(true)\r\n   const startGame = () => {\r\n      setStart(true)\r\n   }\r\n\r\n   let Screen\r\n   if (start === false) {\r\n      Screen = () => {\r\n         return (\r\n            <Opening startGame={startGame} />\r\n         )\r\n      }\r\n   } else if (start === true) {\r\n      Screen = () => {\r\n         return (\r\n            <Main />\r\n         )\r\n      }\r\n   }\r\n\r\n\r\n   return (\r\n      <Screen />\r\n   )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}